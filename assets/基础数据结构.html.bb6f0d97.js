import{_ as t,r as o,o as c,c as l,a as n,b as p,F as u,e,d as s}from"./app.340c2b94.js";const r={},i=e('<h1 id="\u57FA\u7840\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u57FA\u7840\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> \u57FA\u7840\u6570\u636E\u7ED3\u6784</h1><h2 id="\u4E00\u3001trie" tabindex="-1"><a class="header-anchor" href="#\u4E00\u3001trie" aria-hidden="true">#</a> \u4E00\u3001Trie</h2><p>someone read like tree, from retrieval is also corrent.</p><p>Trie \u6811\uFF0C\u53C8\u53EB\u5B57\u5178\u6811\u3001\u524D\u7F00\u6811\uFF08Prifix Tree\uFF09\u3001\u5355\u8BCD\u67E5\u627E\u6811 \u6216 \u952E\u6811\uFF0C\u662F\u4E00\u79CD\u591A\u53C9\u6811\u7ED3\u6784\u3002</p><p>\u5B57\u5178\u6811\u7684\u6027\u8D28</p><ol><li>\u6839\u7ED3\u70B9\uFF08Root\uFF09\u4E0D\u5305\u542B\u5B57\u7B26\uFF0C\u9664\u6839\u8282\u70B9\u5916\u7684\u6BCF\u4E00\u4E2A\u8282\u70B9\u90FD\u4EC5\u5305\u542B\u4E00\u4E2A\u5B57\u7B26</li><li>\u4ECE\u6839\u8282\u70B9\u5230\u67D0\u4E00\u8282\u70B9\u8DEF\u5F84\u4E0A\u6240\u7ECF\u8FC7\u7684\u5B57\u7B26\u8FDE\u63A5\u8D77\u6765\uFF0C\u5373\u4E3A\u8BE5\u8282\u70B9\u5BF9\u5E94\u7684\u5B57\u7B26\u4E32\uFF1B</li><li>\u4EFB\u610F\u8282\u70B9\u7684\u6240\u6709\u5B57\u8282\u70B9\u6240\u5305\u542B\u7684\u5B57\u7B26\u4E32\u90FD\u4E0D\u76F8\u540C</li></ol><p>Use cases : \u81EA\u52A8\u8865\u5168\u3001\u62FC\u5199\u68C0\u67E5\u3001IP \u8DEF\u5F84\uFF08\u6700\u957F\u524D\u7F00\u5339\u914D\uFF09\u3001T9\uFF08\u4E5D\u5BAB\u683C\uFF09\u6253\u5B57\u9884\u6D4B\u3001\u8BCD\u9891\u7EDF\u8BA1\uFF08\u8282\u7701\u5185\u5B58\uFF09</p><h3 id="\u6A21\u677F" tabindex="-1"><a class="header-anchor" href="#\u6A21\u677F" aria-hidden="true">#</a> \u6A21\u677F</h3><p>\u5E38\u7528 method</p><ol><li>addWord(String word)</li><li>search(String word)</li><li>searchPrefix(String prefix)</li></ol>',10),k={id:"_208-\u5B9E\u73B0-trie-\u524D\u7F00\u6811",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_208-\u5B9E\u73B0-trie-\u524D\u7F00\u6811","aria-hidden":"true"},"#",-1),m=s(" 208 "),d={href:"https://leetcode.cn/problems/implement-trie-prefix-tree/",target:"_blank",rel:"noopener noreferrer"},h=s("\u5B9E\u73B0 Trie (\u524D\u7F00\u6811)"),_=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u5B9A\u4E49 TrieNode \u6570\u636E\u7ED3\u6784</span>
<span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">{</span>
  <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> isWord<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>
		<span class="token comment">// \u6210\u5458\u53D8\u91CF root</span>
    <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u521D\u59CB\u5316 root</span>
    <span class="token punctuation">}</span>
    
  	<span class="token comment">// \u6B64\u5904\u6CE8\u610F\uFF1Aroot \u4E0D\u5305\u542B\u4EFB\u4F55\u5B57\u7B26\uFF01</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div>`,1),w={id:"_211-\u6DFB\u52A0\u4E0E\u641C\u7D22\u5355\u8BCD-\u6570\u636E\u7ED3\u6784\u8BBE\u8BA1",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#_211-\u6DFB\u52A0\u4E0E\u641C\u7D22\u5355\u8BCD-\u6570\u636E\u7ED3\u6784\u8BBE\u8BA1","aria-hidden":"true"},"#",-1),v=s(" 211 "),f={href:"https://leetcode.cn/problems/design-add-and-search-words-data-structure",target:"_blank",rel:"noopener noreferrer"},g=s(" \u6DFB\u52A0\u4E0E\u641C\u7D22\u5355\u8BCD - \u6570\u636E\u7ED3\u6784\u8BBE\u8BA1"),x=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">WordDictionary</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">WordDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,1),j={id:"_212-\u5355\u8BCD\u641C\u7D22-ii-\u56F0\u96BE",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#_212-\u5355\u8BCD\u641C\u7D22-ii-\u56F0\u96BE","aria-hidden":"true"},"#",-1),L=s(" 212 "),S={href:"https://leetcode.cn/problems/word-search-ii/",target:"_blank",rel:"noopener noreferrer"},q=s("\u5355\u8BCD\u641C\u7D22 II\uFF08\u56F0\u96BE\uFF09"),M=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">findWords</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="\u4E8C\u3001union-find-\u5E76\u5DEE\u96C6" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u3001union-find-\u5E76\u5DEE\u96C6" aria-hidden="true">#</a> \u4E8C\u3001Union Find \u5E76\u5DEE\u96C6</h2><p>\u52A8\u6001\u8FDE\u63A5\uFF08Dynamic connectivity\uFF09\u7684\u95EE\u9898\uFF0C\u4EC0\u4E48\u662FUnion Find\uFF1F</p><p>\u5E76\u67E5\u96C6 \u662F\u4E00\u79CD\u6811\u5F62\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u7528\u4E8E\u5904\u7406\u4E0D\u4EA4\u96C6\u7684\u5408\u5E76\uFF08union\uFF09\u53CA\u67E5\u8BE2\uFF08find\uFF09\u95EE\u9898\u3002</p><p>Find\uFF1A\u786E\u5B9A\u5143\u7D20\u5C5E\u4E8E\u54EA\u4E00\u4E2A\u5B50\u96C6\u3002\u5B83\u53EF\u4EE5\u88AB\u7528\u6765\u786E\u5B9A\u4E24\u4E2A\u5143\u7D20\u662F\u5426\u5C5E\u4E8E\u540C\u4E00\u5B50\u96C6\u3002</p><p>Union\uFF1A\u5C06\u4E24\u4E2A\u5B50\u96C6\u5408\u5E76\u6210\u540C\u4E00\u4E2A\u96C6\u5408\u3002</p><h3 id="\u6A21\u677F-1" tabindex="-1"><a class="header-anchor" href="#\u6A21\u677F-1" aria-hidden="true">#</a> \u6A21\u677F</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> DSU <span class="token punctuation">{</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">DSU</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parent<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>Improved with size(weighted)</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> DSU <span class="token punctuation">{</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>
  <span class="token comment">// \u8BB0\u5F55\u7EC4\u4E2D\u5143\u7D20\u6570\u91CF</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">DSU</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token comment">// \u521D\u59CB\u5316\u4E3A 1</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u5C0F\u6811\u6302\u5230\u5927\u6811\u4E0A</span>
  <span class="token comment">// \u5143\u7D20\u6570\u91CF\u5C11\u7684\u8D4B\u7ED9\u5143\u7D20\u6570\u91CF\u591A\u7684\u4F7F\u5176\u5E73\u8861\uFF0C\u9AD8\u5EA6\u4E0D\u53D8</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> rootX <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> rootY <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootX <span class="token operator">==</span> rootY<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> size<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">=</span> rootY<span class="token punctuation">;</span>
      size<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token function">size</span><span class="token punctuation">(</span>rootY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span> <span class="token operator">=</span> rootX<span class="token punctuation">;</span>
      size<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p><strong>Improved with ranked</strong></p><p>\u4F7F\u7528 rank \u6765\u4F18\u5316\uFF0Crank \u4EE3\u8868\u6570\u7684\u9AD8\u5EA6\u6216\u6DF1\u5EA6\u3002\u9AD8\u5EA6\u4F4E\u7684\u6811\u5411\u9AD8\u5EA6\u9AD8\u7684\u6811\u5408\u5E76\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> DSU <span class="token punctuation">{</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>
  <span class="token comment">// \u8BB0\u5F55\u6DF1\u5EA6</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">DSU</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>rank<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> rootX <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> rootY <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">=</span> rootY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rans<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">&gt;</span> rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span> <span class="token operator">=</span> rootX<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u76F8\u7B49\u65F6\u9700\u8981\u7EF4\u62A4\u6DF1\u5EA6,X \u8D34\u7ED9 Y\uFF0CY \u6DF1\u5EA6\u52A0\u4E00</span>
      parent<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">=</span> rootY<span class="token punctuation">;</span>
      rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="_305-number-of-islands-2" tabindex="-1"><a class="header-anchor" href="#_305-number-of-islands-2" aria-hidden="true">#</a> 305. Number of Islands 2</h3>`,14),I={id:"_547-\u7701\u4EFD\u6570\u91CF",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#_547-\u7701\u4EFD\u6570\u91CF","aria-hidden":"true"},"#",-1),D=s(),T={href:"https://leetcode.cn/problems/number-of-provinces/",target:"_blank",rel:"noopener noreferrer"},O=s("547. \u7701\u4EFD\u6570\u91CF"),z=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isConnected<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,1),H={id:"_128-\u6700\u957F\u8FDE\u7EED\u5E8F\u5217",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#_128-\u6700\u957F\u8FDE\u7EED\u5E8F\u5217","aria-hidden":"true"},"#",-1),C=s(),X={href:"https://leetcode.cn/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},A=s("128. \u6700\u957F\u8FDE\u7EED\u5E8F\u5217"),Q=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> DSU <span class="token punctuation">{</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token function">DSU</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u5C0F\u6811\u6302\u5230\u5927\u6811\u4E0A</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="\u4E09\u3001heap" tabindex="-1"><a class="header-anchor" href="#\u4E09\u3001heap" aria-hidden="true">#</a> \u4E09\u3001Heap</h2><h2 id="\u56DB\u3001\u6808-\u961F\u5217\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u56DB\u3001\u6808-\u961F\u5217\u5B9E\u73B0" aria-hidden="true">#</a> \u56DB\u3001\u6808\uFF0C\u961F\u5217\u5B9E\u73B0</h2><p>\u6808\uFF08stack\uFF09</p><p>\u6808\u662F\u9650\u5B9A\u4EC5\u5728\u8868\u5C3E\u8FDB\u884C\u63D2\u5165\u548C\u5220\u9664\u64CD\u4F5C\u7684\u7EBF\u6027\u8868\u3002\u6808\u53C8\u79F0\u4E3A\u540E\u8FDB\u5148\u51FA\uFF08Last In First Out\uFF09\u7684\u7EBF\u6027\u8868\uFF0C\u7B80\u79F0 LIFO \u7ED3\u6784\u3002</p><p>\u961F\u5217\uFF08queue\uFF09</p><p>\u961F\u5217\u662F\u53EA\u5141\u8BB8\u5728\u4E00\u7AEF\u8FDB\u884C\u63D2\u5165\u64CD\u4F5C\uFF0C\u800C\u5728\u53E6\u4E00\u7AEF\u8FDB\u884C\u5220\u9664\u64CD\u4F5C\u7684\u7EBF\u6027\u8868\u3002</p><p>\u961F\u5217\u662F\u4E00\u79CD\u5148\u8FDB\u5148\u51FA\uFF08First In First Out\uFF09\u7684\u7EBF\u6027\u8868\uFF0C\u7B80\u79F0 FIFO\u3002\u5141\u8BB8\u63D2\u5165\u7684\u4E00\u7AEF\u79F0\u4E3A\u961F\u5C3E\uFF0C\u5141\u8BB8\u5220\u9664\u7684\u4E00\u7AEF\u79F0\u4E3A\u961F\u5934\u3002</p><h3 id="_155-\u6700\u5C0F\u6808" tabindex="-1"><a class="header-anchor" href="#_155-\u6700\u5C0F\u6808" aria-hidden="true">#</a> 155. \u6700\u5C0F\u6808</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * two stack
 */</span>
<span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>
		<span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 		<span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
  	<span class="token comment">// \u5982\u679C\u4E3A\u7A7A\u6216\u8005\u6BD4\u6808\u9876\u5C0F\u5219 push \u8FDB minStack</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5982\u679C\u79FB\u9664\u7684\u4E0E minStack \u6808\u9876\u4E00\u6837\u5219\u540C\u65F6\u79FB\u9664</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * one stack
 */</span>
<span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>
		<span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
  	<span class="token comment">// \u5B58\u5165\u6570\u7EC4\uFF0C\u6570\u7EC4\u7B2C\u4E00\u4E2A\u653E\u81EA\u8EAB\uFF0C\u7B2C\u4E8C\u4E2A\u4E0E\u4E0A\u4E00\u4E2A\u7B2C\u4E8C\u4E2A\u6BD4\u8F83\u653E\u5165\u5C0F\u7684\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div>`,11),U={id:"_232-\u7528\u6808\u5B9E\u73B0\u961F\u5217",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#_232-\u7528\u6808\u5B9E\u73B0\u961F\u5217","aria-hidden":"true"},"#",-1),B=s(),E={href:"https://leetcode.cn/problems/implement-queue-using-stacks/",target:"_blank",rel:"noopener noreferrer"},P=s("232. \u7528\u6808\u5B9E\u73B0\u961F\u5217"),V={id:"_225-\u7528\u961F\u5217\u5B9E\u73B0\u6808",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#_225-\u7528\u961F\u5217\u5B9E\u73B0\u6808","aria-hidden":"true"},"#",-1),R=s(),Z={href:"https://leetcode.cn/problems/implement-stack-using-queues/",target:"_blank",rel:"noopener noreferrer"},G=s("225. \u7528\u961F\u5217\u5B9E\u73B0\u6808"),J=e(`<ul><li><p>push heavy \u60C5\u51B5</p><p>push O(1)</p><p>pop O(n)</p></li><li><p>pop heavy \u60C5\u51B5</p><p>pop O(1)</p><p>push O(n)</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
 * push heavy \u60C5\u51B5
 * push     O(n)
 * pop\u3001top O(1)
 */</span>
<span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">{</span>
  	<span class="token comment">// \u5B9A\u4E49 q1\uFF0C q2</span>
  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 1. q1 \u4E3A\u7A7A\u653E\u5165 q1</span>
      <span class="token comment">// 2. q2 \u4E0D\u4E3A\u7A7A\u5219\u5168\u5012\u5165 q1</span>
      <span class="token comment">// 3. q1 \u4E0D\u4E3A\u7A7A\u5219\u5168\u5012\u5165 q2</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u68C0\u7D22\u5E76\u79FB\u9664\u961F\u5217\u7684\u5934</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u68C0\u7D22</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// q1, q2 \u5747\u4E3A\u7A7A\u5219\u5224\u7A7A</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
 * push heavy \u60C5\u51B5
 * push     O(1)
 * pop\u3001top O(n)
 */</span>
<span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">{</span>
  	<span class="token comment">// \u5B9A\u4E49 q1\uFF0C q2</span>
  	<span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> q1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> q2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// \u8BB0\u5F55 top \u6570\u636E</span>
    <span class="token keyword">int</span> top\uFF1B
    <span class="token comment">// \u590D\u6742\u5EA6\u4E3A O(1)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			q1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      top <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u68C0\u7D22\u5E76\u79FB\u9664\u961F\u5217\u7684\u5934</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        top <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">int</span> value <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmp <span class="token operator">=</span> q1<span class="token punctuation">;</span>
      q1 <span class="token operator">=</span> q2<span class="token punctuation">;</span>
      q2 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u68C0\u7D22</span>
      <span class="token keyword">return</span> top<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// q1, q2 \u5747\u4E3A\u7A7A\u5219\u5224\u7A7A</span>
      <span class="token keyword">return</span> q1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> q2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div>`,3),$={href:"https://leetcode.cn/problems/design-circular-queue/",target:"_blank",rel:"noopener noreferrer"},nn=s("622. \u8BBE\u8BA1\u5FAA\u73AF\u961F\u5217"),sn=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u4F7F\u7528\u6570\u7EC4\u5B9E\u73B0\u5FAA\u73AF\u961F\u5217</span>
<span class="token keyword">class</span> <span class="token class-name">MyCircularQueue</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">MyCircularQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">Rear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div>`,1),an={id:"_1381-\u8BBE\u8BA1\u4E00\u4E2A\u652F\u6301\u589E\u91CF\u64CD\u4F5C\u7684\u6808",tabindex:"-1"},pn=n("a",{class:"header-anchor",href:"#_1381-\u8BBE\u8BA1\u4E00\u4E2A\u652F\u6301\u589E\u91CF\u64CD\u4F5C\u7684\u6808","aria-hidden":"true"},"#",-1),en=s(),tn={href:"https://leetcode.cn/problems/design-a-stack-with-increment-operation/",target:"_blank",rel:"noopener noreferrer"},on=s("1381. \u8BBE\u8BA1\u4E00\u4E2A\u652F\u6301\u589E\u91CF\u64CD\u4F5C\u7684\u6808"),cn=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u91C7\u7528 lazy \u64CD\u4F5C</span>
<span class="token comment">// \u5C06\u9700\u8981\u52A0\u7684 val \u7F13\u5B58\u5230 inc \u6570\u7EC4\u4E2D\uFF0Cpop \u64CD\u4F5C\u7684\u65F6\u5019\u8FD4\u56DE</span>
<span class="token keyword">class</span> <span class="token class-name">CustomStack</span> <span class="token punctuation">{</span>
		<span class="token comment">// \u521D\u59CB\u5316\u6700\u5927 maxSize</span>
  	<span class="token comment">// \u521D\u59CB\u5316 inc \u6570\u7EC4\u505A\u7F13\u5B58</span>
  	<span class="token comment">// \u521D\u59CB\u5316 stack \u7ED3\u6784</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u521D\u59CB\u5316 maxSize\u3001inc</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u6808\u672A\u6EE1\u5219 push</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u5224\u65AD\u6808\u4E2D\u5143\u7D20\u6570\u91CF</span>
      <span class="token comment">// \u5C0F\u4E8E\u96F6\u8FD4\u56DE -1</span>
      <span class="token comment">// \u5927\u4E8E\u96F6\u5219</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u7ED9\u7F13\u5B58\u8D4B\u503C</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your CustomStack object will be instantiated and called as such:
 * CustomStack obj = new CustomStack(maxSize);
 * obj.push(x);
 * int param_2 = obj.pop();
 * obj.increment(k,val);
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>`,1),ln={id:"_895-\u6700\u5927\u9891\u7387\u6808",tabindex:"-1"},un=n("a",{class:"header-anchor",href:"#_895-\u6700\u5927\u9891\u7387\u6808","aria-hidden":"true"},"#",-1),rn=s(),kn={href:"https://leetcode.cn/problems/maximum-frequency-stack/",target:"_blank",rel:"noopener noreferrer"},bn=s("895. \u6700\u5927\u9891\u7387\u6808"),mn=e('<h2 id="\u4E94\u3001\u94FE\u8868-\u4E0A-\u53CD\u8F6C-\u5408\u5E76-\u627E\u73AF" tabindex="-1"><a class="header-anchor" href="#\u4E94\u3001\u94FE\u8868-\u4E0A-\u53CD\u8F6C-\u5408\u5E76-\u627E\u73AF" aria-hidden="true">#</a> \u4E94\u3001\u94FE\u8868\uFF08\u4E0A\uFF09\u53CD\u8F6C + \u5408\u5E76 + \u627E\u73AF</h2><p>\u94FE\u8868\u5206\u4E3A\u5355\u94FE\u8868\u3001\u53CC\u94FE\u8868\u3001\u5FAA\u73AF\u94FE\u8868\uFF08\u6709\u73AF\uFF09</p><p>\u94FE\u8868\u7684\u6838\u5FC3\u64CD\u4F5C\u96C6\u67093\u79CD\uFF1A\u63D2\u5165\u3001\u5220\u9664\u3001\u67E5\u627E</p><p>\u94FE\u8868\u662F\u7531\u4E00\u7EC4\u4E0D\u5FC5\u76F8\u8FDE\u7684\u5185\u5B58\u7ED3\u6784\uFF08\u8282\u70B9\uFF09\uFF0C\u6309\u7279\u5B9A\u7684\u987A\u5E8F\u94FE\u63A5\u5728\u4E00\u8D77\u7684\u62BD\u8C61\u6570\u636E\u7ED3\u6784</p><p><strong>\u94FE\u8868\u7684\u57FA\u7840\u77E5\u8BC6\u662F\u4EC0\u4E48\uFF1F</strong></p><ol><li>\u7FFB\u8F6C\u94FE\u8868</li><li>\u53CC\u6307\u9488\u5408\u5E76\u94FE\u8868</li><li>\u627E\u73AF</li><li>\u5220\u9664 node</li><li>\u7ED3\u6784\u8F6C\u6362</li></ol>',6),dn={id:"_206-\u53CD\u8F6C\u94FE\u8868",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#_206-\u53CD\u8F6C\u94FE\u8868","aria-hidden":"true"},"#",-1),_n=s(),wn={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},yn=s("206. \u53CD\u8F6C\u94FE\u8868"),vn=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u65B9\u6CD51 interative \u53CC\u6307\u9488</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  		<span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    	<span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">;</span>
        <span class="token comment">// 	\u53CC\u6307\u9488\u540C\u65F6\u540E\u79FB</span>
        newHead <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u65B9\u6CD52 recursive \u9012\u5F52</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">reserve</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
  	<span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> newHead<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>
      <span class="token class-name">ListNode</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">reserve</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>`,1),fn={id:"_92-\u53CD\u8F6C\u94FE\u8868-ii",tabindex:"-1"},gn=n("a",{class:"header-anchor",href:"#_92-\u53CD\u8F6C\u94FE\u8868-ii","aria-hidden":"true"},"#",-1),xn=s(),jn={href:"https://leetcode.cn/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},Nn=s("92. \u53CD\u8F6C\u94FE\u8868 II"),Ln={id:"_25-k-\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868-hard",tabindex:"-1"},Sn=n("a",{class:"header-anchor",href:"#_25-k-\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868-hard","aria-hidden":"true"},"#",-1),qn=s(),Mn={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group",target:"_blank",rel:"noopener noreferrer"},In=s("25. K \u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868"),Yn=s("\uFF08hard\uFF09"),Dn={id:"_2-\u4E24\u6570\u76F8\u52A0",tabindex:"-1"},Tn=n("a",{class:"header-anchor",href:"#_2-\u4E24\u6570\u76F8\u52A0","aria-hidden":"true"},"#",-1),On=s(),zn={href:"https://leetcode.cn/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},Hn=s("2. \u4E24\u6570\u76F8\u52A0"),Fn=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * public class ListNode <span class="token punctuation">{</span>
 *     int val;
 *     ListNode next;
 *     ListNode() <span class="token punctuation">{</span><span class="token punctuation">}</span>
 *     ListNode(int val) <span class="token punctuation">{</span> this.val = val; <span class="token punctuation">}</span>
 *     ListNode(int val, ListNode next) <span class="token punctuation">{</span> this.val = val; this.next = next; <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
 <span class="token comment">// \u6BCF\u4E2A\u94FE\u8868\u4EE3\u8868\u4E00\u4E2A\u6570\u5B57\uFF0C\u76F8\u52A0\u5411\u540E\u8FDB\u4F4D</span>
 <span class="token comment">// 373</span>
 <span class="token comment">// 227</span>
 <span class="token comment">// --------</span>
 <span class="token comment">// 5901</span>
<span class="token comment">// interative compact</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5B9A\u4E49\u865A\u62DF\u5934\u8282\u70B9</span>
      <span class="token comment">// \u5B9A\u4E49\u5F53\u524D\u8282\u70B9\uFF08\u56E0\u4E3A\u540E\u9762\u8981\u8FD4\u56DE\u5934\u8282\u70B9\uFF09</span>
      <span class="token comment">// \u5B9A\u4E49 carry \u4FDD\u5B58\u8FDB\u4F4D</span>
			<span class="token comment">// \u5F53 l1 \u6216 l2 \u4E0D\u4E3A\u7A7A \u6216\u8005 carry == 1 \u4E00\u76F4\u5FAA\u73AF</span>
      		<span class="token comment">// \u8BA1\u7B97\u4F4D\u6570\u4E4B\u548C</span>
      		<span class="token comment">// \u4E0E\u5F53\u524D\u8FDB\u4F4D\u76F8\u52A0</span>
      		<span class="token comment">// \u5B9A\u4E49\u8282\u70B9</span>
          <span class="token comment">// carry = val / 10</span>
      		<span class="token comment">// \u5982\u679Cl1\uFF0C l2\u4E0D\u4E3A\u7A7A\u5219\u4E0B\u4E00\u4E3A</span>
          <span class="token comment">// cur \u4E0B\u4E00\u4F4D</span>
      
      <span class="token comment">// \u8FD4\u56DE\u5934\u8282\u70B9</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,2),Cn={id:"_445-\u4E24\u6570\u76F8\u52A0-ii",tabindex:"-1"},Xn=n("a",{class:"header-anchor",href:"#_445-\u4E24\u6570\u76F8\u52A0-ii","aria-hidden":"true"},"#",-1),An=s(),Qn={href:"https://leetcode.cn/problems/add-two-numbers-ii/",target:"_blank",rel:"noopener noreferrer"},Un=s("445. \u4E24\u6570\u76F8\u52A0 II"),Wn=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u4E0E2\u9898\u4E00\u6837\uFF0C\u53EA\u4E0D\u8FC7\u4F7F\u7528 stack \u53CD\u8F6C\u94FE\u8868\u987A\u5E8F</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,1),Bn={id:"_21-\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868",tabindex:"-1"},En=n("a",{class:"header-anchor",href:"#_21-\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868","aria-hidden":"true"},"#",-1),Pn=s(),Vn={href:"https://leetcode.cn/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},Kn=s("21. \u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868"),Rn=e(`<p>\u6A21\u677F\u57FA\u7840\u9898\uFF0C\u4F5C\u4E3A\u5F88\u591A\u9898\u76EE\u7684 helper method</p><p>\u4E24\u79CD\u89E3\u6CD5</p><ul><li>\u5E38\u89C4\u89E3\u6CD5 \u6CE8\u610F\u6700\u540E\u5269\u4F59\u7684\u4E00\u4E2A\u6570\u636E</li><li>\u9012\u5F52\u89E3\u6CD5</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// interative</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> list1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// recursive</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> list1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>list1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>list2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>list1 <span class="token operator">&lt;</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        list2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,5),Zn={id:"_23-\u5408\u5E76k\u4E2A\u5347\u5E8F\u94FE\u8868-hard",tabindex:"-1"},Gn=n("a",{class:"header-anchor",href:"#_23-\u5408\u5E76k\u4E2A\u5347\u5E8F\u94FE\u8868-hard","aria-hidden":"true"},"#",-1),Jn=s(),$n={href:"https://leetcode.cn/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},ns=s("23. \u5408\u5E76K\u4E2A\u5347\u5E8F\u94FE\u8868"),ss=s(" (hard)"),as=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * public class ListNode <span class="token punctuation">{</span>
 *     int val;
 *     ListNode next;
 *     ListNode() <span class="token punctuation">{</span><span class="token punctuation">}</span>
 *     ListNode(int val) <span class="token punctuation">{</span> this.val = val; <span class="token punctuation">}</span>
 *     ListNode(int val, ListNode next) <span class="token punctuation">{</span> this.val = val; this.next = next; <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,1),ps={id:"_141-\u73AF\u5F62\u94FE\u8868",tabindex:"-1"},es=n("a",{class:"header-anchor",href:"#_141-\u73AF\u5F62\u94FE\u8868","aria-hidden":"true"},"#",-1),ts=s(),os={href:"https://leetcode.cn/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},cs=s("141. \u73AF\u5F62\u94FE\u8868"),ls=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * class ListNode <span class="token punctuation">{</span>
 *     int val;
 *     ListNode next;
 *     ListNode(int x) <span class="token punctuation">{</span>
 *         val = x;
 *         next = null;
 *     <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
<span class="token comment">// \u91C7\u7528\u5FEB\u6162\u53CC\u6307\u9488\u65B9\u6CD5</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,1),us={id:"_142-\u73AF\u5F62\u94FE\u8868-ii",tabindex:"-1"},rs=n("a",{class:"header-anchor",href:"#_142-\u73AF\u5F62\u94FE\u8868-ii","aria-hidden":"true"},"#",-1),is=s(),ks={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},bs=s("142. \u73AF\u5F62\u94FE\u8868 II"),ms=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u4ECE\u6570\u5B66\u601D\u8DEF\u5165\u624B</span>
<span class="token comment">// \u5FEB\u6307\u9488\u8DEF\u7A0B\uFF1A a + (b + c) + b = 2b + a + c</span>
<span class="token comment">// \u6162\u6307\u9488\u8DEF\u7A0B\uFF1A a + b</span>

<span class="token comment">// \u5FEB\u6307\u9488\u8DDD\u79BB = 2 * (a + b) \u4E24\u500D\u901F\u5EA6</span>
<span class="token comment">// 2b + a + c = 2 * (a + b)</span>
<span class="token comment">// c = a</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,1),ds={id:"_287-\u5BFB\u627E\u91CD\u590D\u6570",tabindex:"-1"},hs=n("a",{class:"header-anchor",href:"#_287-\u5BFB\u627E\u91CD\u590D\u6570","aria-hidden":"true"},"#",-1),_s=s(),ws={href:"https://leetcode.cn/problems/find-the-duplicate-number/",target:"_blank",rel:"noopener noreferrer"},ys=s("287. \u5BFB\u627E\u91CD\u590D\u6570"),vs=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u6B64\u9898\u6709\u4E94\u79CD\u89E3\u6CD5\uFF0C\u611F\u5174\u8DA3\u53EF\u4EE5\u4E86\u89E3\u4E00\u4E0B</span>
<span class="token comment">// \u5FEB\u6162\u53CC\u6307\u9488\u4E3A\u6700\u4F18\u89E3</span>
<span class="token comment">// \u65F6\u95F4 O(1)</span>
<span class="token comment">// \u7A7A\u95F4 O(1)</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u66B4\u529B\u89E3\u6CD5</span>
<span class="token comment">// \u65F6\u95F4 O(n)</span>
<span class="token comment">// \u7A7A\u95F4 O(n)</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u65F6\u95F4 O(n)</span>
<span class="token comment">// \u7A7A\u95F4 O(1)</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token comment">// \u5C06\u5143\u7D20\u8F6C\u6362\u4E3A\u4E0B\u6807</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      	<span class="token comment">// \u5982\u679C\u672A\u88AB\u6807\u8BB0\u8FC7\u5219\u8FDB\u884C\u6807\u8BB0</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      	<span class="token keyword">else</span> <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u65F6\u95F4 O(nlog2)</span>
<span class="token comment">// \u7A7A\u95F4 O(1)</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="\u4E94\u3001\u94FE\u8868-\u4E0B-\u5220\u9664-\u590D\u5236-\u7ED3\u6784\u8F6C\u6362" tabindex="-1"><a class="header-anchor" href="#\u4E94\u3001\u94FE\u8868-\u4E0B-\u5220\u9664-\u590D\u5236-\u7ED3\u6784\u8F6C\u6362" aria-hidden="true">#</a> \u4E94\u3001\u94FE\u8868\uFF08\u4E0B\uFF09\u5220\u9664 + \u590D\u5236 + \u7ED3\u6784\u8F6C\u6362</h2>`,5),fs={id:"_203-\u79FB\u9664\u94FE\u8868\u5143\u7D20",tabindex:"-1"},gs=n("a",{class:"header-anchor",href:"#_203-\u79FB\u9664\u94FE\u8868\u5143\u7D20","aria-hidden":"true"},"#",-1),xs=s(),js={href:"https://leetcode.cn/problems/remove-linked-list-elements/",target:"_blank",rel:"noopener noreferrer"},Ns=s("203. \u79FB\u9664\u94FE\u8868\u5143\u7D20"),Ls=e(`<p>\u8FD8\u662F\u4E24\u79CD\u89E3\u6CD5</p><ol><li>\u53CC\u6307\u9488\u89E3\u6CD5</li><li>\u9012\u5F52\u89E3\u6CD5</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// dummy or sentinel \u54E8\u5175\u8282\u70B9</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,3),Ss={id:"_83-\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20",tabindex:"-1"},qs=n("a",{class:"header-anchor",href:"#_83-\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20","aria-hidden":"true"},"#",-1),Ms=s(),Is={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},Ys=s("83. \u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20"),Ds=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,1),Ts={id:"_82-\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20-ii",tabindex:"-1"},Os=n("a",{class:"header-anchor",href:"#_82-\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20-ii","aria-hidden":"true"},"#",-1),zs=s(),Hs={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"},Fs=s("82. \u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20 II"),Cs=e(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,1),Xs={id:"_19-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9",tabindex:"-1"},As=n("a",{class:"header-anchor",href:"#_19-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9","aria-hidden":"true"},"#",-1),Qs=s(),Us={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},Ws=s("19.\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C N \u4E2A\u7ED3\u70B9"),Bs=n("ul",null,[n("li",null,"\u5E38\u89C4\u89E3\u6CD5"),n("li",null,"\u53CC\u6307\u9488\u89E3\u6CD5")],-1),Es={id:"_1171-\u4ECE\u94FE\u8868\u4E2D\u5220\u53BB\u603B\u548C\u503C\u4E3A\u96F6\u7684\u8FDE\u7EED\u8282\u70B9",tabindex:"-1"},Ps=n("a",{class:"header-anchor",href:"#_1171-\u4ECE\u94FE\u8868\u4E2D\u5220\u53BB\u603B\u548C\u503C\u4E3A\u96F6\u7684\u8FDE\u7EED\u8282\u70B9","aria-hidden":"true"},"#",-1),Vs=s(),Ks={href:"https://leetcode.cn/problems/remove-zero-sum-consecutive-nodes-from-linked-list/",target:"_blank",rel:"noopener noreferrer"},Rs=s("1171. \u4ECE\u94FE\u8868\u4E2D\u5220\u53BB\u603B\u548C\u503C\u4E3A\u96F6\u7684\u8FDE\u7EED\u8282\u70B9"),Zs=e(`<p>\u672C\u9898\u76EE\u878D\u5408\u591A\u79CD\u7ECF\u5178\u77E5\u8BC6</p><p>sum + prfixSum \u7684\u7ED3\u5408\uFF0Cprefixsum array \u4E2D\u76F8\u540C value \u7684\u4E24\u4E2A\u70B9\u4E4B\u95F4\u7684 subarray \u7684 sum \u5FC5\u7136\u4E3A 0\uFF0C\u6211\u4EEC\u5728\u7B2C\u4E00\u6B21\u505A prefixSum \u7684\u65F6\u5019\u53EA\u4FDD\u5B58\u6700\u540E\u4E00\u6B21\u76F8\u540C\u7684 value\uFF0C\u8FD9\u6837\u5728\u7B2C\u4E8C\u6B21\u904D\u5386\u7684\u65F6\u5019\u53EF\u4EE5\u76F4\u63A5\u8DF3\u8FC7\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeZeroSumSublists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// \u54E8\u5175</span>
      <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
      <span class="token comment">// prfixSum and ListNode</span>
      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ListNode</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u5B58\u5165\u5934\u8282\u70B9</span>
     	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> prefix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span> i <span class="token operator">=</span> dummy<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prefix <span class="token operator">+=</span> i<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u76F8\u540C prefix \u53EA\u4FDD\u7559\u6700\u540E\u4E00\u4E2A</span>
      <span class="token punctuation">}</span>
      prefix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span> i <span class="token operator">=</span> dummy<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prefix <span class="token operator">+=</span> i<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        i<span class="token punctuation">.</span>next <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,3),Gs={id:"_243-\u6700\u77ED\u5355\u8BCD\u8DDD\u79BB",tabindex:"-1"},Js=n("a",{class:"header-anchor",href:"#_243-\u6700\u77ED\u5355\u8BCD\u8DDD\u79BB","aria-hidden":"true"},"#",-1),$s=s(),na={href:"https://leetcode.cn/problems/shortest-word-distance",target:"_blank",rel:"noopener noreferrer"},sa=s("243. \u6700\u77ED\u5355\u8BCD\u8DDD\u79BB"),aa=n("li",null,[n("p",null,"\u53CD\u8F6C\u94FE\u8868\u540E\u5224\u65AD\u662F\u5426\u4E00\u81F4")],-1),pa=e(`<p>\u5FEB\u6162\u6307\u9488 \u5FEB\u6307\u9488\u662F\u6162\u6307\u9488\u7684\u4E24\u500D \u5FEB\u6307\u9488\u5230\u5934 \u6162\u6307\u9488\u6B63\u597D\u5904\u4E8E\u4E2D\u5FC3</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> firstHalfEnd <span class="token operator">=</span> <span class="token function">endOfFirstHalf</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u7FFB\u8F6C\u540E\u7684\u7B2C\u4E8C\u4E2A\u94FE\u8868</span>
    <span class="token class-name">ListNode</span> secondHalfStart <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>firstHalfEnd<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5BF9\u6BD4\u94FE\u8868</span>
    <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> secondHalfStart<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> p1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">!=</span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7FFB\u8F6C\u56DE\u53BB</span>
    firstHalfEnd<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>secondHalfStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u5229\u7528\u5FEB\u6162\u6307\u9488\u8FD4\u56DE\u94FE\u8868\u534A\u4E2D\u592E\u7684\u8282\u70B9</span>
  <span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">endOfFirstHalf</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u7FFB\u8F6C\u94FE\u8868</span>
  <span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u77ED\u8DEF\u64CD\u4F5C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> res <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div>`,2),ea={id:"_160-\u76F8\u4EA4\u94FE\u8868",tabindex:"-1"},ta=n("a",{class:"header-anchor",href:"#_160-\u76F8\u4EA4\u94FE\u8868","aria-hidden":"true"},"#",-1),oa=s(),ca={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"},la=s("160. \u76F8\u4EA4\u94FE\u8868"),ua=e(`<p>\u63D0\u524D\u5047\u8BBE\u4E24\u4E2A\u94FE\u8868\u76F8\u4EA4</p><ul><li><p>\u8BA1\u7B97\u51FA\u4E24\u4E2A\u94FE\u8868\u957F\u5EA6\uFF0C\u622A\u53D6\u957F\u94FE\u8868\u4E0E\u77ED\u94FE\u8868\u957F\u5EA6\u4E00\u81F4</p></li><li><p>\u5229\u7528\u6570\u5B66\u516C\u5F0F \u4E24\u4E2A\u94FE\u8868\u90FD\u8D70\u5B8C abc \u4E09\u6BB5\u8DEF\u7A0B</p><p>a + c + b = b + c + a</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u4F7F\u7528\u4E34\u65F6\u8282\u70B9\uFF0C\u5934\u8282\u70B9\u9700\u8981\u4FDD\u5B58</span>
      <span class="token class-name">ListNode</span> tmpA <span class="token operator">=</span> headA<span class="token punctuation">;</span>
      <span class="token class-name">ListNode</span> tmpB <span class="token operator">=</span> headB<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>tmpA <span class="token operator">!=</span> tmpB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tmpA <span class="token operator">=</span> tmpA <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> headB <span class="token operator">:</span> tmpA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        tmpB <span class="token operator">=</span> tmpB <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> headA <span class="token operator">:</span> tmpB<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> tmpA<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,3),ra={id:"_138-\u590D\u5236\u5E26\u968F\u673A\u6307\u9488\u7684\u94FE\u8868",tabindex:"-1"},ia=n("a",{class:"header-anchor",href:"#_138-\u590D\u5236\u5E26\u968F\u673A\u6307\u9488\u7684\u94FE\u8868","aria-hidden":"true"},"#",-1),ka=s(),ba={href:"https://leetcode.cn/problems/copy-list-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},ma=s("138. \u590D\u5236\u5E26\u968F\u673A\u6307\u9488\u7684\u94FE\u8868"),da={id:"_426-\u5C06\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u5316\u4E3A\u6392\u5E8F",tabindex:"-1"},ha=n("a",{class:"header-anchor",href:"#_426-\u5C06\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u5316\u4E3A\u6392\u5E8F","aria-hidden":"true"},"#",-1),_a=s(),wa={href:"https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},ya=s("426. \u5C06\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u5316\u4E3A\u6392\u5E8F"),va=e(`<p>\u5C06\u4E8C\u5206\u67E5\u627E\u6811\u8F6C\u6362\u4E3A\u53CC\u94FE\u8868\u7ED3\u6784</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">treeToDoubluList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,2);function fa(ga,xa){const a=o("ExternalLinkIcon");return c(),l(u,null,[i,n("h3",k,[b,m,n("a",d,[h,p(a)])]),_,n("h3",w,[y,v,n("a",f,[g,p(a)])]),x,n("h3",j,[N,L,n("a",S,[q,p(a)])]),M,n("h3",I,[Y,D,n("a",T,[O,p(a)])]),z,n("h3",H,[F,C,n("a",X,[A,p(a)])]),Q,n("h3",U,[W,B,n("a",E,[P,p(a)])]),n("h3",V,[K,R,n("a",Z,[G,p(a)])]),J,n("p",null,[n("a",$,[nn,p(a)])]),sn,n("h3",an,[pn,en,n("a",tn,[on,p(a)])]),cn,n("h3",ln,[un,rn,n("a",kn,[bn,p(a)])]),mn,n("h3",dn,[hn,_n,n("a",wn,[yn,p(a)])]),vn,n("h3",fn,[gn,xn,n("a",jn,[Nn,p(a)])]),n("h3",Ln,[Sn,qn,n("a",Mn,[In,p(a)]),Yn]),n("h3",Dn,[Tn,On,n("a",zn,[Hn,p(a)])]),Fn,n("h3",Cn,[Xn,An,n("a",Qn,[Un,p(a)])]),Wn,n("h3",Bn,[En,Pn,n("a",Vn,[Kn,p(a)])]),Rn,n("h3",Zn,[Gn,Jn,n("a",$n,[ns,p(a)]),ss]),as,n("h3",ps,[es,ts,n("a",os,[cs,p(a)])]),ls,n("h3",us,[rs,is,n("a",ks,[bs,p(a)])]),ms,n("h3",ds,[hs,_s,n("a",ws,[ys,p(a)])]),vs,n("h3",fs,[gs,xs,n("a",js,[Ns,p(a)])]),Ls,n("h3",Ss,[qs,Ms,n("a",Is,[Ys,p(a)])]),Ds,n("h3",Ts,[Os,zs,n("a",Hs,[Fs,p(a)])]),Cs,n("h3",Xs,[As,Qs,n("a",Us,[Ws,p(a)])]),Bs,n("h3",Es,[Ps,Vs,n("a",Ks,[Rs,p(a)])]),Zs,n("h3",Gs,[Js,$s,n("a",na,[sa,p(a)])]),n("ul",null,[aa,n("li",null,[pa,n("h3",ea,[ta,oa,n("a",ca,[la,p(a)])]),ua,n("h3",ra,[ia,ka,n("a",ba,[ma,p(a)])]),n("h3",da,[ha,_a,n("a",wa,[ya,p(a)])]),va])])],64)}var Na=t(r,[["render",fa],["__file","\u57FA\u7840\u6570\u636E\u7ED3\u6784.html.vue"]]);export{Na as default};
